package model.VO;

import HandlerBean.PageListener;

import HandlerBean.UserInfo;

import javax.faces.context.FacesContext;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import model.EO.EO_XXSppSizeImpl;

import oracle.jbo.AttributeList;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;

import org.apache.myfaces.trinidad.render.ExtendedRenderKitService;
import org.apache.myfaces.trinidad.util.Service;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed May 21 21:28:58 PKT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VO_XXSppSizeRowImpl extends ViewRowImpl {
    private int count = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CreatedBy {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setCreatedBy((Number)value);
            }
        },
        CreationDate {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getCreationDate();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setCreationDate((Date)value);
            }
        },
        LastUpdateDate {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getLastUpdateDate();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setLastUpdateDate((Date)value);
            }
        },
        LastUpdatedBy {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setLastUpdatedBy((Number)value);
            }
        },
        ProgramId {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getProgramId();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setProgramId((Number)value);
            }
        },
        SizeId {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getSizeId();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setSizeId((String)value);
            }
        },
        VersionNumber {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getVersionNumber();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setVersionNumber((Number)value);
            }
        },
        SizeDesc {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getSizeDesc();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setSizeDesc((String)value);
            }
        },
        LOV_XXSppSize1 {
            public Object get(VO_XXSppSizeRowImpl obj) {
                return obj.getLOV_XXSppSize1();
            }

            public void put(VO_XXSppSizeRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(VO_XXSppSizeRowImpl object);

        public abstract void put(VO_XXSppSizeRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDATE =
        AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATEDBY =
        AttributesEnum.LastUpdatedBy.index();
    public static final int PROGRAMID = AttributesEnum.ProgramId.index();
    public static final int SIZEID = AttributesEnum.SizeId.index();
    public static final int VERSIONNUMBER =
        AttributesEnum.VersionNumber.index();
    public static final int SIZEDESC = AttributesEnum.SizeDesc.index();
    public static final int LOV_XXSPPSIZE1 =
        AttributesEnum.LOV_XXSppSize1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public VO_XXSppSizeRowImpl() {
        
    }

    /**
     * Gets EO_XXSppSize entity object.
     * @return the EO_XXSppSize
     */
    public EO_XXSppSizeImpl getEO_XXSppSize() {
        return (EO_XXSppSizeImpl)getEntity(0);
    }

    @Override
    protected void create(AttributeList attributeList) {
        super.create(attributeList);

        /*PageListener UserID*/
//        this.setLastUpdatedBy(new Number(Integer.parseInt(PageListener.userID)));
//        this.setCreatedBy(new Number(Integer.parseInt(PageListener.userID)));
        
                FacesContext fctx = FacesContext.getCurrentInstance();
        HttpServletRequest req =
            (HttpServletRequest)fctx.getExternalContext().getRequest();
        HttpSession session = req.getSession();
        
        this.setLastUpdatedBy(new Number(Integer.parseInt((String)session.getAttribute("userID"))));
        this.setCreatedBy(new Number(Integer.parseInt((String)session.getAttribute("userID"))));


    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public Number getCreatedBy() {
        return (Number)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_BY using the alias name CreatedBy.
     * @param value value to set the CREATED_BY
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CREATION_DATE using the alias name CreationDate.
     * @return the CREATION_DATE
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATION_DATE using the alias name CreationDate.
     * @param value value to set the CREATION_DATE
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for LAST_UPDATE_DATE using the alias name LastUpdateDate.
     * @return the LAST_UPDATE_DATE
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_UPDATE_DATE using the alias name LastUpdateDate.
     * @param value value to set the LAST_UPDATE_DATE
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @return the LAST_UPDATED_BY
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @param value value to set the LAST_UPDATED_BY
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for PROGRAM_ID using the alias name ProgramId.
     * @return the PROGRAM_ID
     */
    public Number getProgramId() {
        return (Number)getAttributeInternal(PROGRAMID);
    }

    /**
     * Sets <code>value</code> as attribute value for PROGRAM_ID using the alias name ProgramId.
     * @param value value to set the PROGRAM_ID
     */
    public void setProgramId(Number value) {
        setAttributeInternal(PROGRAMID, value);
    }

    /**
     * Gets the attribute value for SIZE_ID using the alias name SizeId.
     * @return the SIZE_ID
     */
    public String getSizeId() {
        return (String)getAttributeInternal(SIZEID);
    }

    /**
     * Sets <code>value</code> as attribute value for SIZE_ID using the alias name SizeId.
     * @param value value to set the SIZE_ID
     */
    public void setSizeId(String value) {


        setAttributeInternal(SIZEID, value);


    }

    public static void runJavaScriptCode(String javascriptCode) {
        FacesContext facesCtx = FacesContext.getCurrentInstance();

        ExtendedRenderKitService service =
            Service.getRenderKitService(facesCtx,
                                        ExtendedRenderKitService.class);

        service.addScript(facesCtx, javascriptCode);
    }

    /**
     * Gets the attribute value for VERSION_NUMBER using the alias name VersionNumber.
     * @return the VERSION_NUMBER
     */
    public Number getVersionNumber() {
        return (Number)getAttributeInternal(VERSIONNUMBER);
    }

    /**
     * Sets <code>value</code> as attribute value for VERSION_NUMBER using the alias name VersionNumber.
     * @param value value to set the VERSION_NUMBER
     */
    public void setVersionNumber(Number value) {
        setAttributeInternal(VERSIONNUMBER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SizeDesc.
     * @return the SizeDesc
     */
    public String getSizeDesc() {
        return (String)getAttributeInternal(SIZEDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SizeDesc.
     * @param value value to set the  SizeDesc
     */
    public void setSizeDesc(String value) {
        System.out.println("Usman is in setSizeDesc");

        setAttributeInternal(SIZEDESC, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOV_XXSppSize1.
     */
    public RowSet getLOV_XXSppSize1() {
        return (RowSet)getAttributeInternal(LOV_XXSPPSIZE1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
